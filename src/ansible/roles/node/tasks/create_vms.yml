
- name: Create VMs
  community.general.proxmox_kvm:
    api_host: '{{ node_host }}'
    api_user: '{{ api_user }}'
    api_token_id: '{{ api_token_id }}'
    api_token_secret: "{{ lookup('ansible.builtin.file', api_token_secret) }}"

    node: '{{ vm.node }}'
    name: '{{ vm.name }}'
    vmid: '{{ vm.vmid }}'
    cores: '{{ vm.cores }}'
    memory: '{{ vm.memory }}'
    net: '{"net0":"virtio,bridge={{ linux_bridge }},firewall=1"}'
    cicustom: 'user={{ storage.snippets.id }}:snippets/{{ vm.vmid }}-cloud-init.yml'
    scsi:
      scsi0: '{{ drive_storage }}:0,import-from={{ storage.images.id }}:0/{{ vm.image_file }},format={{ drive_format }},iothread=1'
    ide:
      ide2: '{{ drive_storage }}:cloudinit'

    vga: serial0
    serial: '{"serial0":"socket"}'
    scsihw: virtio-scsi-single
    onboot: 'no'
    kvm: false
    sockets: 1
    boot: order=scsi0
    ipconfig:
      ipconfig0: 'ip=dhcp'
    agent: 'enabled=1'
    timeout: 700

  with_items: '{{ machines }}'
  loop_control:
    loop_var: vm
  when: (vm.state == "new") or
        (vm.state == 'template')

- name: Update network settings
  community.general.proxmox_kvm:
    api_host: '{{ node_host }}'
    api_user: '{{ api_user }}'
    api_token_id: '{{ api_token_id }}'
    api_token_secret: "{{ lookup('ansible.builtin.file', api_token_secret) }}"

    node: '{{ vm.node }}'
    vmid: '{{ vm.vmid }}'
    ipconfig:
      ipconfig0: 'ip={{ vm.ipv4_address }},gw={{ vm.ipv4_gateway }}'
    timeout: 60
    update: true

  with_items: '{{ machines }}'
  loop_control:
    loop_var: vm
  when: (vm.state == "new" or vm.state == 'template') and
        (vm.ipv4mode is defined and vm.ipv4mode == 'static')

- name: Resize disk
  community.general.proxmox_disk:
    api_host: '{{ node_host }}'
    api_user: '{{ api_user }}'
    api_token_id: '{{ api_token_id }}'
    api_token_secret: "{{ lookup('ansible.builtin.file', api_token_secret) }}"

    vmid: '{{ vm.vmid }}'

    disk: 'scsi0'
    size: '{{ vm.disk_size }}'
    state: 'resized'
    timeout: 60

  with_items: '{{ machines }}'
  loop_control:
    loop_var: vm
  when: (vm.state == "new") or
        (vm.state == 'template')

- name: Start VMs
  community.general.proxmox_kvm:
    api_host: '{{ node_host }}'
    api_user: '{{ api_user }}'
    api_token_id: '{{ api_token_id }}'
    api_token_secret: "{{ lookup('ansible.builtin.file', api_token_secret) }}"

    node: '{{ vm.node }}'
    vmid: '{{ vm.vmid }}'
    state: 'started'
    timeout: 60

  with_items: '{{ machines }}'
  loop_control:
    loop_var: vm
  when: 'vm.state == "new"'